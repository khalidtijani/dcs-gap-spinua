#!/bin/bash

# source the ciop functions (e.g. ciop-log, ciop-getparam)
source ${ciop_job_include}
source /home/khalidtijani/.bashrc

export MATLAB_SHELL=
# set the environment variables to use MATLAB Runtime v91 release R2016b 
#export MCR_ROOT=/opt/MCR_R2016b
#export LD_LIBRARY_PATH=${MCR_ROOT}/v91/runtime/glnxa64:${MCR_ROOT}/v91/bin/glnxa64:${MCR_ROOT}/v91/sys/os/glnxa64:${LD_LIBRARY_PATH}

#export STORAGE=/home/${USER}/storage
#export SPINUA=/home/${USER}/dcs-cnr-issia-spinua/spinua/bin/GAP/gap_chain_v2.0

# define the exit codes
SUCCESS=0
#SNAP_REQUEST_ERROR=1
ERR_SPINUA=1
ERR_NOARG=2
#ERR_NOINPUT=4

# add a trap to exit gracefully
function cleanExit ()
{
source /home/khalidtijani/.bashrc

    local retval=$?
    local msg=""

    case ${retval} in
        ${SUCCESS})            msg="Processing successfully concluded";;
 #       ${SNAP_REQUEST_ERROR}) msg="Could not create snap request file";;
        ${ERR_SPINUA})           msg="Main_Spinua_Run failed to process step X0 : Splitter ";;
        
        
        ${ERR_NOARG})         msg="No Input Argument provided";;
 #       ${ERR_NOINPUT})        msg="No input provided";;
        *)                     msg="Unknown error";;
    esac

   [ ${retval} -ne 0 ] && ciop-log "ERROR" "Error ${retval} - ${msg}, processing aborted" || ciop-log "INFO" "${msg}"
   exit ${retval}
}

trap cleanExit EXIT

function main() {
source /home/khalidtijani/.bashrc
    
    #defines the input
    
    ver=$( echo "${1}" | cut -d";" -f1 )
 #   ciop-log "INFO" "The version $ver for spinua chain"
 #   [ -z "${ver}" ] && return ${ERR_NOARG}

    step=$( echo "${1}" | cut -d";" -f2 )
 #   ciop-log "INFO" "Th step $step for spinua chain"
 #   [ -z "${step}" ] && return ${ERR_NOARG}



    #local ver
    #ver="v2.0"
    #ver=$1
    #local step
    #step="X0"
    ciop-log "INFO" "The version $ver for spinua chain"
    ciop-log "INFO" "Th step $step for spinua chain"  

#  step=$1
    # retrieve the parameters value from workflow or job default value
    stringin="`ciop-getparam stringarg`"
    
    ciop-log "DEBUG" "The Input String for echo using system cmd of matlab is: ${stringin}"
      # run a check on the expression value, it can't be empty
    [ -z "$stringin" ] && exit $ERR_NOARG
    
    # log the value, it helps debugging. 
    # the log entry is available in the process stderr 
    ciop-log "DEBUG" "The Input String for echo using system cmd of matlab is: ${stringin}"

    ciop-log "INFO" "The version $ver for spinua chain"
    ciop-log "INFO" "Th step $step for spinua chain"
    
    
    for file1 in $(less /home/khalidtijani/S1_Khalid_N098_S1_IW_SLC_A_orb044_VV.list1)
    do
    cd /data/input/storage2/S1Data/rootDataset/L0_InputData/out/
    mv $file1".zip" Aorb044vv/ 
    mv $file1".ESA"  Aorb044vv/
    done
    
    for file2 in $(less /home/khalidtijani/S1_Khalid_N100_S1_IW_SLC_A_orb117_VV.list1)
    do
    cd /data/input/storage2/S1Data/rootDataset/L0_InputData/out/
    mv $file2".zip" Aorb117vv/  
    mv $file2".ESA" Aorb117vv/                                          
    done
 
    for file3 in $(less /home/khalidtijani/S1_Khalid_N100_S1_IW_SLC_D_orb124_VV.list1)
    do
    cd /data/input/storage2/S1Data/rootDataset/L0_InputData/out/
    mv $file3".zip" Dorb124vv/
    mv $file3".ESA" Dorb124vv/                                                         
    done

    
    # prepare the SPINUA Step request

    # invoke the Main SPINUA run binary
    #${MAINSPINUA}/Fun_callsystem  $stringin    &> /tmp/log.txt 
    
    # check the exit code
    [ $? -eq 0 ] || return $ERR_SPINUA

    # compress the ESA BEAM results
  
    # publish the compressed results
    ciop-log "INFO" "The Result is saved as namedataset.list01 namedataset.list02 namedataset.list03 in this path ${outputfolder} "
    ciop-log "INFO" "Publishing ${stringin} " 
    

    # cleanup
    #rm -rf ${retrieved} ${OUTPUTDIR}/${outputname}.d* ${OUTPUTDIR}/${outputname}.tgz 

    return ${SUCCESS}
}

# create the output folder to store the output products and export it
source /home/khalidtijani/.bashrc
#step="X0"
while read arg; do
#   step="X"$step 
   ciop-log "INFO" "Arguments ${arg} "
   main "${arg}"
   res=$?
  [ ${res} -ne 0 ] && exit ${res}
done
#main  
#res=$?
#[ ${res} -ne 0 ] && exit ${res}

exit $SUCCESS
