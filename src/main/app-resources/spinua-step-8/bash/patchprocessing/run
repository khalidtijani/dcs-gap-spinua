#!/bin/bash

# source the ciop functions (e.g. ciop-log, ciop-getparam)
source ${ciop_job_include}
source $_CIOP_APPLICATION_PATH/env/env_include.sh
export MATLAB_SHELL=

#source /home/khalidtijani/.bashrc
# set the environment variables to use MATLAB Runtime v91 release R2016b 
#export USER=khalidtijani
#export STORAGE=/data/input/storage2
#export SPINUA=/home/${USER}/dcs-cnr-issia-spinua/spinua/bin/GAP/gap_chain_v2.0
#export MAINSPINUA=/home/${USER}/dcs-cnr-issia-spinua/spinua

#export COMMADS=/home/${USER}/dcs-cnr-issia-spinua/spinua

#export PATH=/bin:/usr/local/bin:/usr/bin:$COMMADS/bin:${PATH}

#export MCR_ROOT=/home/khalidtijani/MATLAB/MATLAB_Runtime
#export LD_LIBRARY_PATH=${MCR_ROOT}/v90/runtime/glnxa64:${MCR_ROOT}/v90/bin/glnxa64:${MCR_ROOT}/v90/sys/os/glnxa64:${LD_LIBRARY_PATH}
#export MCR_ROOT=/opt/MCR_R2016b
#export LD_LIBRARY_PATH=${MCR_ROOT}/v91/runtime/glnxa64:${MCR_ROOT}/v91/bin/glnxa64:${MCR_ROOT}/v91/sys/os/glnxa64:${LD_LIBRARY_PATH}

#export STORAGE=/home/${USER}/storage
#export SPINUA=/home/${USER}/dcs-cnr-issia-spinua/spinua/bin/GAP/gap_chain_v2.0

# define the exit codes
SUCCESS=0
#SNAP_REQUEST_ERROR=1
ERR_SPINUA=1
ERR_NOARG=2
#ERR_NOINPUT=4

# add a trap to exit gracefully
function cleanExit ()
{
#source /home/khalidtijani/.bashrc

    local retval=$?
    local msg=""

    case ${retval} in
        ${SUCCESS})            msg="Processing successfully concluded";;
 #       ${SNAP_REQUEST_ERROR}) msg="Could not create snap request file";;
        ${ERR_SPINUA})           msg="Main_Spinua_Run failed to process step 07 : SPINUA-Step FD: Patch Processing and Final Delivery ";;
        
        
        ${ERR_NOARG})         msg="No Input Argument provided";;
 #       ${ERR_NOINPUT})        msg="No input provided";;
        *)                     msg="Unknown error";;
    esac

   [ ${retval} -ne 0 ] && ciop-log "ERROR" "Error ${retval} - ${msg}, processing aborted" || ciop-log "INFO" "${msg}"
   exit ${retval}
}

trap cleanExit EXIT

function main() {
#source /home/khalidtijani/.bashrc
#source $_CIOP_APPLICATION_PATH/env/env_include.sh
   
    #defines the input
    
    ver=$( echo "${1}" | cut -d";" -f1 )
    ciop-log "INFO" "The version $ver for spinua chain"
    [ -z "${ver}" ] && return ${ERR_NOARG}

    step=$( echo "${1}" | cut -d";" -f2 )
    ciop-log "INFO" "Th step $step1 for spinua chain"
   [ -z "${step}" ] && return ${ERR_NOARG}
    
 

    #local ver
    #ver="v2.0"
    #ver=$1
    #local step
    #step="X0"
    #ciop-log "INFO" "The version $ver for spinua chain"
    #ciop-log "INFO" "Th step $step for spinua chain"  

#  step=$1
    # retrieve the parameters value from workflow or job default value

    rootFolder="`ciop-getparam rootFolder`"
    ciop-log "DEBUG" "The RootFolder of results as IN/OUT processing step is: ${rootFolder}"
    SubswathIn="`ciop-getparam subswath`"
    PolarisationIn="`ciop-getparam polarisation`"
    extentCropIn="`ciop-getparam extentCrop`"

    LonMinIn=$( echo "${extentCropIn}" | cut -d"," -f1 )
    LatMinIn=$( echo "${extentCropIn}" | cut -d"," -f2 )
    LonMaxIn=$( echo "${extentCropIn}" | cut -d"," -f3 )
    LatMaxIn=$( echo "${extentCropIn}" | cut -d"," -f4 )
    
    extentPatchIn="`ciop-getparam extentPatch`"
    
    LonMinInPatch=$( echo "${extentPatchIn}" | cut -d"," -f1 )
    LatMinInPatch=$( echo "${extentPatchIn}" | cut -d"," -f2 )
    LonMaxInPatch=$( echo "${extentPatchIn}" | cut -d"," -f3 )
    LatMaxInPatch=$( echo "${extentPatchIn}" | cut -d"," -f4 )

    SPSC_SettingStrIn1="OFF"
    SPSC_SettingStrIn2="ON"
    SPSC_SettingStrIn3="0"
    
#    SPSC_SettingStrIn1="`ciop-getparam SPSC_SettingStr1`"
#    SPSC_SettingStrIn2="`ciop-getparam SPSC_SettingStr2`"
#    SPSC_SettingStrIn3="`ciop-getparam SPSC_SettingStr3`"

    IIPSTE_SettingStrIn1="`ciop-getparam IIPSTE_SettingStr1`"
    IIPSTE_SettingStrIn21="`ciop-getparam IIPSTE_SettingStr21`"
    IIPSTE_SettingStrIn22="`ciop-getparam IIPSTE_SettingStr22`"
    IIPSTE_SettingStrIn23="`ciop-getparam IIPSTE_SettingStr23`"
    IIPSTE_SettingStrIn24="`ciop-getparam IIPSTE_SettingStr24`"
    
    IIPSTE_SettingStrIn3="`ciop-getparam IIPSTE_SettingStr3`"
    IIPSTE_SettingStrIn4="`ciop-getparam IIPSTE_SettingStr4`"
     
    local bbox
    bbox="LAT"$LatMinIn"_"$LatMaxIn"LON"$LonMinIn"_"$LonMaxIn
    ciop-log "INFO" "The Boundary Box argument used is $bbox for this run"
     
    local Subswath_POl
    Subswath_POl=${SubswathIn}"_"${PolarisationIn}

    ciop-log "DEBUG" "The sub-swath name and polarization name used is Subswath_POl: ${Subswath_POl}"
#    ciop-log "DEBUG" "SPSC_SettingStr.RP.LAPSR_APS_INTIMG_LIN_EST_BPERP = $SPSC_SettingStrIn1"
#    ciop-log "DEBUG" "SPSC_SettingStr.RP.LAPSR_APS_INTIMG_LIN_EST_BTEMP = $SPSC_SettingStrIn2"
#    ciop-log "DEBUG" "SPSC_SettingStr.RP.PSReports.SkipLAPSRBBFLTERuns = $SPSC_SettingStrIn3"
    ciop-log "DEBUG" "Inter-Image Coherence Threshold = $IIPSTE_SettingStrIn1"
    ciop-log "DEBUG" "Mean Velocity Offset = $IIPSTE_SettingStrIn21"
    ciop-log "DEBUG" "Height Offset = $IIPSTE_SettingStrIn22"
    ciop-log "DEBUG" "Latitude Offset = $IIPSTE_SettingStrIn23"
    ciop-log "DEBUG" "Longitude Offset = $IIPSTE_SettingStrIn24"

    ciop-log "DEBUG" "Maximum Velocity Value for palette saturation of KML maps = $IIPSTE_SettingStrIn3"
    ciop-log "DEBUG" "Threshold on the Mean Velocity for Displacement Trend Generation = $IIPSTE_SettingStrIn4"

    
     # run a check on the expression value, it can't be empty
    [ -z "$rootFolder" ] && exit $ERR_NOARG
    [ -z "$step" ] && exit $ERR_NOARG
 
    [ -z "$LatMinIn" ] && exit $ERR_NOARG
    [ -z "$LatMaxIn" ] && exit $ERR_NOARG
    [ -z "$LonMinIn" ] && exit $ERR_NOARG
    [ -z "$LonMaxIn" ] && exit $ERR_NOARG
    
    [ -z "$LatMinInPatch" ] && exit $ERR_NOARG
    [ -z "$LatMaxInPatch" ] && exit $ERR_NOARG
    [ -z "$LonMinInPatch" ] && exit $ERR_NOARG
    [ -z "$LonMaxInPatch" ] && exit $ERR_NOARG
    [ -z "$SPSC_SettingStrIn1" ] && exit $ERR_NOARG
    [ -z "$SPSC_SettingStrIn2" ] && exit $ERR_NOARG
    [ -z "$SPSC_SettingStrIn3" ] && exit $ERR_NOARG
    [ -z "$IIPSTE_SettingStrIn1" ] && exit $ERR_NOARG
    [ -z "$IIPSTE_SettingStrIn21" ] && exit $ERR_NOARG
    [ -z "$IIPSTE_SettingStrIn22" ] && exit $ERR_NOARG
    [ -z "$IIPSTE_SettingStrIn23" ] && exit $ERR_NOARG
    [ -z "$IIPSTE_SettingStrIn24" ] && exit $ERR_NOARG
    [ -z "$IIPSTE_SettingStrIn3" ] && exit $ERR_NOARG
    [ -z "$IIPSTE_SettingStrIn4" ] && exit $ERR_NOARG
    [ -z "$Subswath_POl" ] && exit $ERR_NOARG
    # report activity in log
    ciop-log "INFO" "The version $ver for spinua chain"
    ciop-log "INFO" "Th step $step for spinua chain"
    
    ciop-log "DEBUG" "The LatMin used is: ${LatMinIn}"
    ciop-log "DEBUG" "The LatMax used is: ${LatMaxIn}"
    ciop-log "DEBUG" "The LonMin used is: ${LonMinIn}"
    ciop-log "DEBUG" "The LonMax used is: ${LonMaxIn}"

    ciop-log "INFO" "The Boundary Box argument used is $bbox for this run"

    ciop-log "DEBUG" "The LatMinPatch used is: ${LatMinInPatch}"
    ciop-log "DEBUG" "The LatMaxPatch used is: ${LatMaxInPatch}"
    ciop-log "DEBUG" "The LonMinPatch used is: ${LonMinInPatch}"
    ciop-log "DEBUG" "The LonMaxPatch used is: ${LonMaxInPatch}"

    ciop-log "DEBUG" "The STORAGE Path used is: ${STORAGE}"
    ciop-log "DEBUG" "The MAINSPINUA Path used is: ${MAINSPINUA}"
    ciop-log "DEBUG" "The SPINUA Path used is: ${SPINUA}"

    SM_UUID=`cat ${STORAGE}"/S1Data/"${rootFolder}"/L1_SM_selection/log/sm_uuid.txt" | awk 'NR == 1'`

    ciop-log "DEBUG" "SM_UUID= : $SM_UUID"


    # prepare the SPINUA Step request
    
    # invoke the Main SPINUA run binary
    #export PATH=/usr/local/bin:/usr/bin:${PATH} 
    #unzip --version 
    #which unzip
    #rm -rf "$STORAGE"/S1Data/"$rootFolder"/L5_PSC_Map/$SM_UUID/${Subswath_POl}/LAT37* 

    PatchGeoCoordTxtFile=${STORAGE}"/S1Data/"${rootFolder}"/L5_PSC_Map/"${SM_UUID}/${Subswath_POl}/${bbox}"/tmp/PatchGeoCoordTxtFile_User.txt"
    echo "LatLonPatches = ["${LatMinInPatch}", "${LatMaxInPatch}","${LonMinInPatch}", "${LonMaxInPatch}"];" >  $PatchGeoCoordTxtFile

echo "% --- Processing Optimization. --- " >>  $PatchGeoCoordTxtFile
echo "SPSC_SettingStr.RP.LAPSR_APS_INTIMG_LIN_EST_BPERP = '"$SPSC_SettingStrIn1"';" >>  $PatchGeoCoordTxtFile
echo "SPSC_SettingStr.RP.LAPSR_APS_INTIMG_LIN_EST_BTEMP = '"$SPSC_SettingStrIn2"';" >>  $PatchGeoCoordTxtFile
echo "% --- End Processing Optimization. --- "  >>  $PatchGeoCoordTxtFile
echo "" >>  $PatchGeoCoordTxtFile
echo "% --- Output refinement. ---" >>  $PatchGeoCoordTxtFile
echo "SPSC_SettingStr.RP.PSReports.SkipLAPSRBBFLTERuns = "$SPSC_SettingStrIn3";" >>  $PatchGeoCoordTxtFile
echo "IIPSTE_SettingStr.PSReports.PSCohTh = "$IIPSTE_SettingStrIn1"; "  >>  $PatchGeoCoordTxtFile
echo "IIPSTE_SettingStr.PSReports.OffsetsVelDEMErrAzPosLatLon = ["$IIPSTE_SettingStrIn21" "$IIPSTE_SettingStrIn22" 0 "$IIPSTE_SettingStrIn23" "$IIPSTE_SettingStrIn24"];"   >>  $PatchGeoCoordTxtFile
echo "IIPSTE_SettingStr.PSReports.KMLGeneration.ThMinMaxVelocity = [0 -"$IIPSTE_SettingStrIn3" "$IIPSTE_SettingStrIn3"];"   >>  $PatchGeoCoordTxtFile
echo "IIPSTE_SettingStr.PSReports.TrendGeneration.VelAbsTh = "$IIPSTE_SettingStrIn4";"  >>  $PatchGeoCoordTxtFile
echo "% --- End Output refinement. ---"  >>  $PatchGeoCoordTxtFile
    
    ${MAINSPINUA}/Main_Spinua_Run $ver $step $rootFolder dbg - ${Subswath_POl} $bbox Prm_SPINUA_GEP_TemplateLinkL5ToL9.m &> /dev/null

     # check the exit code
    [ $? -ne 0 ] && exit $ERR_SPINUA
    
    ciop-log "INFO" "check the exit code $? for spinua chain"

    # check the exit code
    #[ $? -eq 0 ] || return $ERR_SPINUA

    # compress the ESA BEAM results
    outputfolder="${STORAGE}/S1Data/$rootFolder/L5_PSC_Map/$SM_UUID/${Subswath_POl}/$bbox"

    
  
    # publish the compressed results
    ciop-log "INFO" "The Result is saved in this path ${outputfolder} "
    ciop-log "INFO" "Publishing ${outputfolder} " 
    

    # cleanup
    #rm -rf ${retrieved} ${OUTPUTDIR}/${outputname}.d* ${OUTPUTDIR}/${outputname}.tgz 

    return ${SUCCESS}
}

# create the output folder to store the output products and export it
#source /home/khalidtijani/.bashrc
#step="X0"
while read arg; do
#   step="X"$step 
   ciop-log "INFO" "Arguments ${arg} "
   main "${arg}"
   res=$?
  [ ${res} -ne 0 ] && exit ${res}
done
#main  
#res=$?
#[ ${res} -ne 0 ] && exit ${res}

exit $SUCCESS
